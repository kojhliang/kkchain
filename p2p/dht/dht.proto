syntax = "proto3";

package pb;

option java_multiple_files = true;
option java_package = "org.invin.kkchain.p2p.dht";
option java_outer_classname = "KKChainProto";

//import "google/protobuf/any.proto";

import "gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;

// Test options
// FIXME: uncomment when fixed https://github.com/gogo/protobuf/issues/407
// option (gogoproto.populate_all) = true;
// option (gogoproto.testgen_all) = true;


// Record represents a dht record that contains a value
// for a key value pair
message Record {
	// The key that references this record
	string key = 1;

	// The actual value this record is storing
	bytes value = 2;

	// hash of the authors public key
	string author = 3;

	// A PKI signature for the key+value+author
	bytes signature = 4;

	// Time the record was received, set by receiver
	string timeReceived = 5;
}

message Message {
	enum Type {
		PUT_VALUE = 0;
		GET_VALUE = 1;
		ADD_PROVIDER = 2;
		GET_PROVIDERS = 3;
		FIND_NODE = 4;
        FIND_NODE_RESULT = 5;
        PING = 6;
        PONG = 7;
	}

	enum ConnectionType {
		// sender does not have a connection to peer, and no extra information (default)
		NOT_CONNECTED = 0;

		// sender has a live connection to peer
		CONNECTED = 1;

		// sender recently connected to peer
		CAN_CONNECT = 2;

		// sender recently tried to connect to peer repeatedly but failed to connect
		// ("try" here is loose, but this should signal "made strong effort, failed")
		CANNOT_CONNECT = 3;
	}

	message Peer {
		// ID of a given peer.
		string id = 1;

		// multiaddrs for a given peer
		repeated bytes addrs = 2;

		// used to signal the sender's connection capabilities to the peer
		ConnectionType connection = 3;
	}

	// defines what type of message it is.
	Type type = 1;

	// Used to specify the key associated with this message.
	// PUT_VALUE, GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	string key = 2;

	// Used to return a value
	// PUT_VALUE, GET_VALUE
	Record record = 3;

	// Used to return peers closer to a key in a query
	// GET_VALUE, GET_PROVIDERS, FIND_NODE
	repeated Peer closerPeers = 8;

	// Used to return Providers
	// GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	repeated Peer providerPeers = 9;
}
