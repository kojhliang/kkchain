// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p2p/dht/pb/dht.proto

package dht

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Message_Type int32

const (
	Message_PUT_VALUE        Message_Type = 0
	Message_GET_VALUE        Message_Type = 1
	Message_ADD_PROVIDER     Message_Type = 2
	Message_GET_PROVIDERS    Message_Type = 3
	Message_FIND_NODE        Message_Type = 4
	Message_FIND_NODE_RESULT Message_Type = 5
	Message_PING             Message_Type = 6
	Message_PONG             Message_Type = 7
)

var Message_Type_name = map[int32]string{
	0: "PUT_VALUE",
	1: "GET_VALUE",
	2: "ADD_PROVIDER",
	3: "GET_PROVIDERS",
	4: "FIND_NODE",
	5: "FIND_NODE_RESULT",
	6: "PING",
	7: "PONG",
}
var Message_Type_value = map[string]int32{
	"PUT_VALUE":        0,
	"GET_VALUE":        1,
	"ADD_PROVIDER":     2,
	"GET_PROVIDERS":    3,
	"FIND_NODE":        4,
	"FIND_NODE_RESULT": 5,
	"PING":             6,
	"PONG":             7,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dht_fe9c1f19bae2ee54, []int{1, 0}
}

type Message_ConnectionType int32

const (
	// sender does not have a connection to peer, and no extra information (default)
	Message_NOT_CONNECTED Message_ConnectionType = 0
	// sender has a live connection to peer
	Message_CONNECTED Message_ConnectionType = 1
	// sender recently connected to peer
	Message_CAN_CONNECT Message_ConnectionType = 2
	// sender recently tried to connect to peer repeatedly but failed to connect
	// ("try" here is loose, but this should signal "made strong effort, failed")
	Message_CANNOT_CONNECT Message_ConnectionType = 3
)

var Message_ConnectionType_name = map[int32]string{
	0: "NOT_CONNECTED",
	1: "CONNECTED",
	2: "CAN_CONNECT",
	3: "CANNOT_CONNECT",
}
var Message_ConnectionType_value = map[string]int32{
	"NOT_CONNECTED":  0,
	"CONNECTED":      1,
	"CAN_CONNECT":    2,
	"CANNOT_CONNECT": 3,
}

func (x Message_ConnectionType) String() string {
	return proto.EnumName(Message_ConnectionType_name, int32(x))
}
func (Message_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dht_fe9c1f19bae2ee54, []int{1, 1}
}

// Record represents a dht record that contains a value
// for a key value pair
type Record struct {
	// The key that references this record
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The actual value this record is storing
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// hash of the authors public key
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// A PKI signature for the key+value+author
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// Time the record was received, set by receiver
	TimeReceived         string   `protobuf:"bytes,5,opt,name=timeReceived,proto3" json:"timeReceived,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()      { *m = Record{} }
func (*Record) ProtoMessage() {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_dht_fe9c1f19bae2ee54, []int{0}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(dst, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Record) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Record) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Record) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Record) GetTimeReceived() string {
	if m != nil {
		return m.TimeReceived
	}
	return ""
}

type Message struct {
	// defines what type of message it is.
	Type Message_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.Message_Type" json:"type,omitempty"`
	// Used to specify the key associated with this message.
	// PUT_VALUE, GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Used to return a value
	// PUT_VALUE, GET_VALUE
	Record *Record `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
	// Used to return peers closer to a key in a query
	// GET_VALUE, GET_PROVIDERS, FIND_NODE
	CloserPeers []*Message_Peer `protobuf:"bytes,8,rep,name=closerPeers" json:"closerPeers,omitempty"`
	// Used to return Providers
	// GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	ProviderPeers        []*Message_Peer `protobuf:"bytes,9,rep,name=providerPeers" json:"providerPeers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_dht_fe9c1f19bae2ee54, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_PUT_VALUE
}

func (m *Message) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Message) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Message) GetCloserPeers() []*Message_Peer {
	if m != nil {
		return m.CloserPeers
	}
	return nil
}

func (m *Message) GetProviderPeers() []*Message_Peer {
	if m != nil {
		return m.ProviderPeers
	}
	return nil
}

type Message_Peer struct {
	// ID of a given peer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// multiaddrs for a given peer
	Addrs [][]byte `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	// used to signal the sender's connection capabilities to the peer
	Connection           Message_ConnectionType `protobuf:"varint,3,opt,name=connection,proto3,enum=pb.Message_ConnectionType" json:"connection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Message_Peer) Reset()      { *m = Message_Peer{} }
func (*Message_Peer) ProtoMessage() {}
func (*Message_Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_dht_fe9c1f19bae2ee54, []int{1, 0}
}
func (m *Message_Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message_Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message_Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message_Peer.Merge(dst, src)
}
func (m *Message_Peer) XXX_Size() int {
	return m.Size()
}
func (m *Message_Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Message_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Message_Peer proto.InternalMessageInfo

func (m *Message_Peer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message_Peer) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *Message_Peer) GetConnection() Message_ConnectionType {
	if m != nil {
		return m.Connection
	}
	return Message_NOT_CONNECTED
}

func init() {
	proto.RegisterType((*Record)(nil), "dht.Record")
	proto.RegisterType((*Message)(nil), "dht.Message")
	proto.RegisterType((*Message_Peer)(nil), "dht.Message.Peer")
	proto.RegisterEnum("dht.Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterEnum("dht.Message_ConnectionType", Message_ConnectionType_name, Message_ConnectionType_value)
}
func (this *Record) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Record)
	if !ok {
		that2, ok := that.(Record)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Record")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Record but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Record but is not nil && this == nil")
	}
	if this.Key != that1.Key {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return fmt.Errorf("Value this(%v) Not Equal that(%v)", this.Value, that1.Value)
	}
	if this.Author != that1.Author {
		return fmt.Errorf("Author this(%v) Not Equal that(%v)", this.Author, that1.Author)
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if this.TimeReceived != that1.TimeReceived {
		return fmt.Errorf("TimeReceived this(%v) Not Equal that(%v)", this.TimeReceived, that1.TimeReceived)
	}
	return nil
}
func (this *Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record)
	if !ok {
		that2, ok := that.(Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if this.Author != that1.Author {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if this.TimeReceived != that1.TimeReceived {
		return false
	}
	return true
}
func (this *Message) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Key != that1.Key {
		return fmt.Errorf("Key this(%v) Not Equal that(%v)", this.Key, that1.Key)
	}
	if !this.Record.Equal(that1.Record) {
		return fmt.Errorf("Record this(%v) Not Equal that(%v)", this.Record, that1.Record)
	}
	if len(this.CloserPeers) != len(that1.CloserPeers) {
		return fmt.Errorf("CloserPeers this(%v) Not Equal that(%v)", len(this.CloserPeers), len(that1.CloserPeers))
	}
	for i := range this.CloserPeers {
		if !this.CloserPeers[i].Equal(that1.CloserPeers[i]) {
			return fmt.Errorf("CloserPeers this[%v](%v) Not Equal that[%v](%v)", i, this.CloserPeers[i], i, that1.CloserPeers[i])
		}
	}
	if len(this.ProviderPeers) != len(that1.ProviderPeers) {
		return fmt.Errorf("ProviderPeers this(%v) Not Equal that(%v)", len(this.ProviderPeers), len(that1.ProviderPeers))
	}
	for i := range this.ProviderPeers {
		if !this.ProviderPeers[i].Equal(that1.ProviderPeers[i]) {
			return fmt.Errorf("ProviderPeers this[%v](%v) Not Equal that[%v](%v)", i, this.ProviderPeers[i], i, that1.ProviderPeers[i])
		}
	}
	return nil
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Record.Equal(that1.Record) {
		return false
	}
	if len(this.CloserPeers) != len(that1.CloserPeers) {
		return false
	}
	for i := range this.CloserPeers {
		if !this.CloserPeers[i].Equal(that1.CloserPeers[i]) {
			return false
		}
	}
	if len(this.ProviderPeers) != len(that1.ProviderPeers) {
		return false
	}
	for i := range this.ProviderPeers {
		if !this.ProviderPeers[i].Equal(that1.ProviderPeers[i]) {
			return false
		}
	}
	return true
}
func (this *Message_Peer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message_Peer)
	if !ok {
		that2, ok := that.(Message_Peer)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message_Peer")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message_Peer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message_Peer but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if len(this.Addrs) != len(that1.Addrs) {
		return fmt.Errorf("Addrs this(%v) Not Equal that(%v)", len(this.Addrs), len(that1.Addrs))
	}
	for i := range this.Addrs {
		if !bytes.Equal(this.Addrs[i], that1.Addrs[i]) {
			return fmt.Errorf("Addrs this[%v](%v) Not Equal that[%v](%v)", i, this.Addrs[i], i, that1.Addrs[i])
		}
	}
	if this.Connection != that1.Connection {
		return fmt.Errorf("Connection this(%v) Not Equal that(%v)", this.Connection, that1.Connection)
	}
	return nil
}
func (this *Message_Peer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message_Peer)
	if !ok {
		that2, ok := that.(Message_Peer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Addrs) != len(that1.Addrs) {
		return false
	}
	for i := range this.Addrs {
		if !bytes.Equal(this.Addrs[i], that1.Addrs[i]) {
			return false
		}
	}
	if this.Connection != that1.Connection {
		return false
	}
	return true
}
func (this *Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Record{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Author: "+fmt.Sprintf("%#v", this.Author)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "TimeReceived: "+fmt.Sprintf("%#v", this.TimeReceived)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Message{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Record != nil {
		s = append(s, "Record: "+fmt.Sprintf("%#v", this.Record)+",\n")
	}
	if this.CloserPeers != nil {
		s = append(s, "CloserPeers: "+fmt.Sprintf("%#v", this.CloserPeers)+",\n")
	}
	if this.ProviderPeers != nil {
		s = append(s, "ProviderPeers: "+fmt.Sprintf("%#v", this.ProviderPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message_Peer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Message_Peer{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Addrs: "+fmt.Sprintf("%#v", this.Addrs)+",\n")
	s = append(s, "Connection: "+fmt.Sprintf("%#v", this.Connection)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDht(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDht(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDht(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDht(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDht(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.TimeReceived) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDht(dAtA, i, uint64(len(m.TimeReceived)))
		i += copy(dAtA[i:], m.TimeReceived)
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDht(dAtA, i, uint64(m.Type))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDht(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Record != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDht(dAtA, i, uint64(m.Record.Size()))
		n1, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.CloserPeers) > 0 {
		for _, msg := range m.CloserPeers {
			dAtA[i] = 0x42
			i++
			i = encodeVarintDht(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ProviderPeers) > 0 {
		for _, msg := range m.ProviderPeers {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintDht(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Message_Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message_Peer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDht(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDht(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Connection != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDht(dAtA, i, uint64(m.Connection))
	}
	return i, nil
}

func encodeVarintDht(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Record) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDht(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDht(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovDht(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovDht(uint64(l))
	}
	l = len(m.TimeReceived)
	if l > 0 {
		n += 1 + l + sovDht(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDht(uint64(m.Type))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDht(uint64(l))
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovDht(uint64(l))
	}
	if len(m.CloserPeers) > 0 {
		for _, e := range m.CloserPeers {
			l = e.Size()
			n += 1 + l + sovDht(uint64(l))
		}
	}
	if len(m.ProviderPeers) > 0 {
		for _, e := range m.ProviderPeers {
			l = e.Size()
			n += 1 + l + sovDht(uint64(l))
		}
	}
	return n
}

func (m *Message_Peer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDht(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovDht(uint64(l))
		}
	}
	if m.Connection != 0 {
		n += 1 + sovDht(uint64(m.Connection))
	}
	return n
}

func sovDht(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDht(x uint64) (n int) {
	return sovDht(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Record) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Author:` + fmt.Sprintf("%v", this.Author) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`TimeReceived:` + fmt.Sprintf("%v", this.TimeReceived) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Record:` + strings.Replace(fmt.Sprintf("%v", this.Record), "Record", "Record", 1) + `,`,
		`CloserPeers:` + strings.Replace(fmt.Sprintf("%v", this.CloserPeers), "Message_Peer", "Message_Peer", 1) + `,`,
		`ProviderPeers:` + strings.Replace(fmt.Sprintf("%v", this.ProviderPeers), "Message_Peer", "Message_Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message_Peer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message_Peer{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Addrs:` + fmt.Sprintf("%v", this.Addrs) + `,`,
		`Connection:` + fmt.Sprintf("%v", this.Connection) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDht(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDht
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeReceived", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeReceived = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDht(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDht
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDht
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Message_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Record{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloserPeers = append(m.CloserPeers, &Message_Peer{})
			if err := m.CloserPeers[len(m.CloserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderPeers = append(m.ProviderPeers, &Message_Peer{})
			if err := m.ProviderPeers[len(m.ProviderPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDht(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDht
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message_Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDht
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDht
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connection", wireType)
			}
			m.Connection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDht
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Connection |= (Message_ConnectionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDht(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDht
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDht(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDht
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDht
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDht
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDht
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDht
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDht(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDht = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDht   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("p2p/dht/pb/dht.proto", fileDescriptor_dht_fe9c1f19bae2ee54) }

var fileDescriptor_dht_fe9c1f19bae2ee54 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x8e, 0x9a, 0x50,
	0x14, 0xc6, 0xbd, 0x80, 0xce, 0x78, 0xfc, 0xd3, 0xdb, 0x1b, 0xd3, 0x50, 0xd3, 0x10, 0x43, 0xba,
	0x70, 0x85, 0x09, 0x4d, 0xba, 0xe8, 0xce, 0x01, 0x6a, 0xcc, 0x4c, 0x81, 0x30, 0x3a, 0x5d, 0x1a,
	0x84, 0x5b, 0x25, 0x4e, 0x81, 0x00, 0x9a, 0xb8, 0x6b, 0xba, 0xec, 0xaa, 0xdb, 0xbe, 0x41, 0x1f,
	0xa5, 0xcb, 0x2e, 0xbb, 0x1c, 0xed, 0x0b, 0xf4, 0x11, 0x9a, 0x7b, 0xd5, 0x51, 0x17, 0xb3, 0xe2,
	0xfc, 0xce, 0xf9, 0x3e, 0xee, 0x77, 0x4f, 0x00, 0x5a, 0xa9, 0x9e, 0xf6, 0xc2, 0x79, 0xd1, 0x4b,
	0xa7, 0xec, 0xa1, 0xa5, 0x59, 0x52, 0x24, 0x44, 0x48, 0xa7, 0x6d, 0x75, 0x96, 0xcc, 0x92, 0x1e,
	0xe7, 0xe9, 0xf2, 0x53, 0x8f, 0x11, 0x07, 0x5e, 0xed, 0x74, 0xea, 0x37, 0x04, 0x15, 0x8f, 0x06,
	0x49, 0x16, 0x12, 0x0c, 0xe2, 0x82, 0xae, 0x65, 0xd4, 0x41, 0xdd, 0xaa, 0xc7, 0x4a, 0xd2, 0x82,
	0xf2, 0xca, 0xbf, 0x5f, 0x52, 0x59, 0xe8, 0xa0, 0x6e, 0xdd, 0xdb, 0x01, 0x79, 0x01, 0x15, 0x7f,
	0x59, 0xcc, 0x93, 0x4c, 0x16, 0xb9, 0x74, 0x4f, 0xe4, 0x15, 0x54, 0xf3, 0x68, 0x16, 0xfb, 0xc5,
	0x32, 0xa3, 0xb2, 0xc4, 0x1d, 0xc7, 0x06, 0x51, 0xa1, 0x5e, 0x44, 0x9f, 0xa9, 0x47, 0x03, 0x1a,
	0xad, 0x68, 0x28, 0x97, 0xb9, 0xf7, 0xac, 0xa7, 0xfe, 0x90, 0xe0, 0xe2, 0x03, 0xcd, 0x73, 0x7f,
	0x46, 0xc9, 0x6b, 0x90, 0x8a, 0x75, 0x4a, 0x79, 0x9c, 0xa6, 0x8e, 0xb5, 0x74, 0xaa, 0xed, 0x47,
	0xda, 0x68, 0x9d, 0x52, 0x8f, 0x4f, 0x0f, 0x99, 0x85, 0x63, 0x66, 0x15, 0x2a, 0x19, 0xbf, 0x0f,
	0x4f, 0x57, 0xd3, 0x81, 0x39, 0x77, 0x37, 0xf4, 0xf6, 0x13, 0xa2, 0x43, 0x2d, 0xb8, 0x4f, 0x72,
	0x9a, 0xb9, 0x94, 0x66, 0xb9, 0x7c, 0xd9, 0x11, 0xbb, 0xb5, 0xf3, 0x23, 0xd8, 0xc0, 0x3b, 0x15,
	0x91, 0xb7, 0xd0, 0x48, 0xb3, 0x64, 0x15, 0x85, 0x07, 0x57, 0xf5, 0x09, 0xd7, 0xb9, 0xac, 0x3d,
	0x07, 0x89, 0x15, 0xa4, 0x09, 0x42, 0x14, 0xee, 0x97, 0x2b, 0x44, 0x21, 0xdb, 0xad, 0x1f, 0x86,
	0x59, 0x2e, 0x0b, 0x1d, 0x91, 0xed, 0x96, 0x03, 0x79, 0x07, 0x10, 0x24, 0x71, 0x4c, 0x83, 0x22,
	0x4a, 0x62, 0x7e, 0x83, 0xa6, 0xde, 0x3e, 0x3d, 0xc2, 0x78, 0x9c, 0xf2, 0x2d, 0x9c, 0xa8, 0xd5,
	0xaf, 0x08, 0x24, 0xd6, 0x24, 0x0d, 0xa8, 0xba, 0xe3, 0xd1, 0xe4, 0xae, 0x7f, 0x33, 0xb6, 0x70,
	0x89, 0xe1, 0xc0, 0x3a, 0x20, 0x22, 0x18, 0xea, 0x7d, 0xd3, 0x9c, 0xb8, 0x9e, 0x73, 0x37, 0x34,
	0x2d, 0x0f, 0x0b, 0xe4, 0x39, 0x34, 0x98, 0xe0, 0xd0, 0xb9, 0xc5, 0x22, 0xf3, 0xbc, 0x1f, 0xda,
	0xe6, 0xc4, 0x76, 0x4c, 0x0b, 0x4b, 0xa4, 0x05, 0xf8, 0x11, 0x27, 0x9e, 0x75, 0x3b, 0xbe, 0x19,
	0xe1, 0x32, 0xb9, 0x04, 0xc9, 0x1d, 0xda, 0x03, 0x5c, 0xe1, 0x95, 0x63, 0x0f, 0xf0, 0x85, 0xfa,
	0x11, 0x9a, 0xe7, 0x11, 0xd9, 0xdb, 0x6d, 0x67, 0x34, 0x31, 0x1c, 0xdb, 0xb6, 0x8c, 0x91, 0x65,
	0xee, 0x12, 0x1d, 0x11, 0x91, 0x67, 0x50, 0x33, 0xfa, 0xf6, 0x41, 0x81, 0x05, 0x42, 0xa0, 0x69,
	0xf4, 0xed, 0x13, 0x17, 0x16, 0xaf, 0x9c, 0x3f, 0x1b, 0xa5, 0xf4, 0xb0, 0x51, 0xd0, 0xbf, 0x8d,
	0x82, 0xbe, 0x6c, 0x15, 0xf4, 0x73, 0xab, 0xa0, 0x5f, 0x5b, 0x05, 0xfd, 0xde, 0x2a, 0xe8, 0x61,
	0xab, 0xa0, 0xef, 0x7f, 0x95, 0x12, 0xbc, 0x4c, 0xb2, 0x99, 0x16, 0xc5, 0xab, 0x28, 0xd6, 0x16,
	0x8b, 0x60, 0xee, 0x47, 0xb1, 0x96, 0xea, 0xa9, 0x16, 0xce, 0x8b, 0xab, 0xfa, 0xf5, 0xb5, 0xc1,
	0x1a, 0x2e, 0xfb, 0xee, 0x5d, 0x34, 0xad, 0xf0, 0x1f, 0xe0, 0xcd, 0xff, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x8d, 0x26, 0x30, 0x14, 0x40, 0x03, 0x00, 0x00,
}
